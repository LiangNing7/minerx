// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package usercenter

import (
	"github.com/LiangNing7/goutils/pkg/db"
	"github.com/LiangNing7/goutils/pkg/options"
	"github.com/LiangNing7/goutils/pkg/server"
	validation2 "github.com/LiangNing7/goutils/pkg/validation"
	"github.com/LiangNing7/minerx/internal/usercenter/biz"
	"github.com/LiangNing7/minerx/internal/usercenter/handler"
	"github.com/LiangNing7/minerx/internal/usercenter/pkg/auth"
	"github.com/LiangNing7/minerx/internal/usercenter/pkg/validation"
	"github.com/LiangNing7/minerx/internal/usercenter/store"
)

// Injectors from wire.go:

func InitializeWebServer(arg <-chan struct{}, config *Config, mySQLOptions *db.MySQLOptions, jwtOptions *options.JWTOptions, redisOptions *options.RedisOptions, kafkaOptions *options.KafkaOptions) (server.Server, error) {
	etcdOptions := config.EtcdOptions
	registrar := server.NewEtcdRegistrar(etcdOptions)
	kratosAppConfig := ProvideKratosAppConfig(registrar)
	gormDB, err := db.NewMySQL(mySQLOptions)
	if err != nil {
		return nil, err
	}
	datastore := store.NewStore(gormDB)
	authenticator, err := NewAuthenticator(jwtOptions, redisOptions)
	if err != nil {
		return nil, err
	}
	secretSetter := store.NewSecretSetter(datastore)
	authnImpl, err := auth.NewAuthn(secretSetter)
	if err != nil {
		return nil, err
	}
	kafkaLogger, err := auth.NewLogger(kafkaOptions)
	if err != nil {
		return nil, err
	}
	authzImpl, err := auth.NewAuthz(gormDB, redisOptions, kafkaLogger)
	if err != nil {
		return nil, err
	}
	authAuth := auth.NewAuth(authnImpl, authzImpl)
	bizBiz := biz.NewBiz(datastore, authenticator, authAuth)
	handlerHandler := handler.NewHandler(bizBiz)
	logger := ProvideKratosLogger()
	validator := validation.New(datastore)
	validationValidator := validation2.NewValidator(validator)
	v := NewMiddlewares(logger, authenticator, validationValidator)
	serverConfig := &ServerConfig{
		cfg:         config,
		appConfig:   kratosAppConfig,
		handler:     handlerHandler,
		middlewares: v,
	}
	serverServer, err := NewWebServer(serverConfig)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}
